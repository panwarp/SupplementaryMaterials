# LAMMPS input script for viscosity of 3d LJ liquid
# Green-Kubo method via fix ave/correlate

# Setup parameters
variable            fluid index API636 API637 API638 API639 API640 API641 API642 API643 API644 API645 API646 API647 API648 API649 API650 API651 API652 API653 API654 API655
variable       		T equal 32 # Equilibrium temperature [F]
log             	logGKvisc_${fluid}_T${T}FP1atm.out

# Potential information
units           	real
dimension       	3
boundary        	p p p
atom_style      	full

pair_style      	lj/cut/coul/cut 12.0 12.0 
bond_style      	harmonic
angle_style     	harmonic
dihedral_style 		opls
improper_style     	cvff
pair_modify 		mix geometric tail yes
special_bonds   	lj/coul 0.0 0.0 0.0

# Define variables
variable        	eqmT equal ($T-459.67)*5/9 	# Equilibrium temperature [K]
variable        	tpdn equal 3*1E6 			# Time for production run [fs]

variable    		dt equal 1.0				# time step [fs]
variable    		p equal 100					# Nrepeat, correlation length
variable    		s equal 10       			# Nevery, sample interval
variable    		d equal $s*$p  				# Nfreq, dump interval
variable 			V equal vol

# convert from LAMMPS real units to SI
variable    		kB equal 1.3806504e-23    	# boltzmann constant [J/K]
variable    		atm2Pa equal 101325.0		# 1.0 atm = 101325.0 Pa
variable    		A2m equal 1.0e-10 			# 1.0 Å = 1.0e-10 m
variable    		fs2s equal 1.0e-15 			# 1.0 fs = 1.0e-15 s
variable			Pas2cP equal 1.0e+3			# 1.0 Pa.s = 1.0e+3 cP
variable    		convert equal ${atm2Pa}*${atm2Pa}*${fs2s}*${A2m}*${A2m}*${A2m}*${Pas2cP}

# Read equilibrium file
read_restart  		state_${fluid}_T${T}FP1atm.restart
neighbor        	2.0 bin
neigh_modify 		every 1 delay 0 check yes

##################################### Viscosity Calculation #####################################################
reset_timestep 		0 
timestep     		${dt}						# define time step [fs]

compute         	TT all temp
compute         	myP all pressure TT
fix             	1 all nve
fix             	2 all langevin ${eqmT} ${eqmT} 100.0 482648

variable        	myPxx equal c_myP[1]
variable        	myPyy equal c_myP[2]
variable       		myPzz equal c_myP[3]
variable     		myPxy equal c_myP[4]
variable     		myPxz equal c_myP[5]
variable     		myPyz equal c_myP[6]

fix             	3 all ave/time 1 1 1 v_myPxx v_myPyy v_myPzz v_myPxy v_myPxz v_myPyz ave one file Stress_AVGOne111_${fluid}_T${T}FP1atm.out
fix             	4 all ave/time $s $p $d v_myPxx v_myPyy v_myPzz v_myPxy v_myPxz v_myPyz ave one file Stress_AVGOnespd_${fluid}_T${T}FP1atm.out

# Look at the contribution of each potential to the stress
compute 			Press_Pair all pressure TT pair
compute 			Press_Bond all pressure TT bond
compute 			Press_Angle all pressure TT angle
compute 			Press_Dihedral all pressure TT dihedral
compute 			Press_Improper all pressure TT improper

# Also, output velocity profiles (vx) for production run
fix  				5 all ave/time $s $p $d c_Press_Pair[*] ave one file Press_Pair_${fluid}_T${T}FP1atm.out
fix  				6 all ave/time $s $p $d c_Press_Bond[*] ave one file Press_Bond_${fluid}_T${T}FP1atm.out
fix  				7 all ave/time $s $p $d c_Press_Angle[*] ave one file Press_Angle_${fluid}_T${T}FP1atm.out
fix  				8 all ave/time $s $p $d c_Press_Dihedral[*] ave one file Press_Dihedral_${fluid}_T${T}FP1atm.out
fix  				9 all ave/time $s $p $d c_Press_Improper[*] ave one file Press_Improper_${fluid}_T${T}FP1atm.out
fix  				10 all ave/time 1 1 1 c_myP[*] ave one file Press_All_AVGOne111_${fluid}_T${T}FP1atm.out
fix  				11 all ave/time $s $p $d c_myP[*] ave one file Press_All_AVGOnespd_${fluid}_T${T}FP1atm.out

# Addition parameters
compute         	molchunk all chunk/atom molecule discard no                      			# chunk system based on molecule's IDs
compute         	myCOM all com/chunk molchunk                      							# center of mass of each of the molecules (3/mol)
compute 			myIten all inertia/chunk molchunk 											# calculates the inertia tensor (6/mol)
compute         	myRG all gyration/chunk molchunk                              				# computes radius of gyration for each molecule (1/mol)
compute         	myRGten all gyration/chunk molchunk tensor                          		# computes radius of gyration tensor for each molecule (6/mol)
compute 			myShapeten all gyration/shape/chunk myRGten           						# calculates the eigenvalues of the gyration tensor and three shape parameters (6/mol)
compute 			myDP all dipole/chunk molchunk 												# calculates the dipole vector and total dipole (4/mol)

fix             	12 all ave/time $s $p $d c_myCOM[*] file com_${fluid}_T${T}FP1atm.out mode vector  				# average center of mass of molecules
fix             	13 all ave/time $s $p $d c_myIten[*] file Itensor_${fluid}_T${T}FP1atm.out mode vector
fix             	14 all ave/time $s $p $d c_myRG file RG_${fluid}_T${T}FP1atm.out mode vector   					# average radius of gyration for all molecules
fix             	15 all ave/time $s $p $d c_myRGten[*] file RGtensor_${fluid}_T${T}FP1atm.out mode vector
fix             	16 all ave/time $s $p $d c_myShapeten[*] file RGShapetensor_${fluid}_T${T}FP1atm.out mode vector
fix             	17 all ave/time $s $p $d c_myDP[*] file Dipole_${fluid}_T${T}FP1atm.out mode vector

# Get thermodynamic information
thermo       		$d 						# dump interval for thermal properties
thermo_style 		custom step temp press density pxx pyy pzz pxy pxz pyz pe ke etotal evdwl ecoul epair ebond eangle edihed eimp emol etail enthalpy vol
fix 				thermo_print all print $d "$(step) $(temp) $(press) $(density) $(pxx) $(pyy) $(pzz) $(pxy) $(pxz) $(pyz) $(pe) $(ke) $(etotal) $(evdwl) $(ecoul) $(epair) $(ebond) $(eangle) $(edihed) $(eimp) $(emol) $(etail) $(enthalpy) $(vol)" &
					append thermoNVE_${fluid}_T${T}FP1atm.out screen no title "# step temp press density pxx pyy pzz pxy pxz pyz pe ke etotal evdwl ecoul epair ebond eangle edihed eimp emol etail enthalpy vol"
thermo_modify  		flush yes

# Dump all molecule coordinates
dump            	1 all custom $d All_u_${fluid}_T${T}FP1atm.lammpstrj id mol type xu yu zu mass q
dump_modify     	1 sort id

# Production run: Green-Kubo ata collection for 5ns
run          		${tpdn}
write_restart   	GKvisc_${fluid}_T${T}FP1atm.restart

################################# CALL TO START NEXT LOOP #######################################
clear
next            	fluid
jump 				in.visc.gk